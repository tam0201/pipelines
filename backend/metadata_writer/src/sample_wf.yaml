apiVersion: v1
items:
- apiVersion: argoproj.io/v1alpha1
  kind: Workflow
  metadata:
    annotations:
      pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
      pipelines.kubeflow.org/pipeline_compilation_time: 2022-10-25T09:45:51.358456
      pipelines.kubeflow.org/pipeline_spec: '{"description": "A toy pipeline that
        performs arithmetic calculations.", "inputs": [{"default": "a", "name": "a",
        "optional": true}, {"default": "7", "name": "b", "optional": true}, {"default":
        "17", "name": "c", "optional": true}], "name": "calculation-pipeline"}'
      pipelines.kubeflow.org/run_name: Clone (5) of calc_pipeline 2022-10-25 09-45-51
      workflows.argoproj.io/pod-name-format: v1
    creationTimestamp: "2022-12-20T09:08:59Z"
    generateName: calculation-pipeline-
    generation: 3
    labels:
      pipeline/runid: eb8d5ca2-b93c-4cf0-b54d-d81cd306d611
      pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
      workflows.argoproj.io/phase: Running
    name: calculation-pipeline-4rdpv
    namespace: tam-do
    resourceVersion: "70375018"
    selfLink: /apis/argoproj.io/v1alpha1/namespaces/tam-do/workflows/calculation-pipeline-4rdpv
    uid: 4a563c2c-812e-4f16-8887-b234499ba6a2
  spec:
    arguments:
      parameters:
      - name: a
        value: "7"
      - name: b
        value: "8"
      - name: c
        value: "17"
    entrypoint: calculation-pipeline
    podMetadata:
      labels:
        pipeline/runid: eb8d5ca2-b93c-4cf0-b54d-d81cd306d611
    serviceAccountName: default-editor
    templates:
    - container:
        args:
        - --a
        - '{{inputs.parameters.a}}'
        - --b
        - "4"
        - '----output-paths'
        - /tmp/outputs/Output/data
        command:
        - sh
        - -ec
        - |
          program_path=$(mktemp)
          printf "%s" "$0" > "$program_path"
          python3 -u "$program_path" "$@"
        - |
          def add(a, b):
              '''Calculates sum of two arguments'''
              return a + b

          def _serialize_float(float_value: float) -> str:
              if isinstance(float_value, str):
                  return float_value
              if not isinstance(float_value, (float, int)):
                  raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                      str(float_value), str(type(float_value))))
              return str(float_value)

          import argparse
          _parser = argparse.ArgumentParser(prog='Add', description='Calculates sum of two arguments')
          _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
          _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
          _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
          _parsed_args = vars(_parser.parse_args())
          _output_files = _parsed_args.pop("_output_paths", [])

          _outputs = add(**_parsed_args)

          _outputs = [_outputs]

          _output_serializers = [
              _serialize_float,

          ]

          import os
          for idx, output_file in enumerate(_output_files):
              try:
                  os.makedirs(os.path.dirname(output_file))
              except OSError:
                  pass
              with open(output_file, 'w') as f:
                  f.write(_output_serializers[idx](_outputs[idx]))
        image: python:3.7
        name: ""
        resources: {}
      inputs:
        parameters:
        - name: a
      metadata:
        annotations:
          pipelines.kubeflow.org/arguments.parameters: '{"a": "{{inputs.parameters.a}}",
            "b": "4"}'
          pipelines.kubeflow.org/component_ref: '{}'
          pipelines.kubeflow.org/component_spec: '{"description": "Calculates sum
            of two arguments", "implementation": {"container": {"args": ["--a", {"inputValue":
            "a"}, "--b", {"inputValue": "b"}, "----output-paths", {"outputPath": "Output"}],
            "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\"
            > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def add(a,
            b):\n   ''''''Calculates sum of two arguments''''''\n   return a + b\n\ndef
            _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
            str):\n        return float_value\n    if not isinstance(float_value,
            (float, int)):\n        raise TypeError(''Value \"{}\" has type \"{}\"
            instead of float.''.format(\n            str(float_value), str(type(float_value))))\n    return
            str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
            description=''Calculates sum of two arguments'')\n_parser.add_argument(\"--a\",
            dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
            dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
            dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
            = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
            = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
            os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
            OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
            "image": "python:3.7"}}, "inputs": [{"name": "a", "type": "Float"}, {"name":
            "b", "type": "Float"}], "name": "Add", "outputs": [{"name": "Output",
            "type": "Float"}]}'
          sidecar.istio.io/inject: "false"
        labels:
          pipelines.kubeflow.org/cache_enabled: "true"
          pipelines.kubeflow.org/enable_caching: "true"
          pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
          pipelines.kubeflow.org/pipeline-sdk-type: kfp
      name: add
      outputs:
        artifacts:
        - name: add-Output
          path: /tmp/outputs/Output/data
        parameters:
        - name: add-Output
          valueFrom:
            path: /tmp/outputs/Output/data
    - container:
        args:
        - --a
        - '{{inputs.parameters.my-divmod-quotient}}'
        - --b
        - '{{inputs.parameters.c}}'
        - '----output-paths'
        - /tmp/outputs/Output/data
        command:
        - sh
        - -ec
        - |
          program_path=$(mktemp)
          printf "%s" "$0" > "$program_path"
          python3 -u "$program_path" "$@"
        - |
          def add(a, b):
              '''Calculates sum of two arguments'''
              return a + b

          def _serialize_float(float_value: float) -> str:
              if isinstance(float_value, str):
                  return float_value
              if not isinstance(float_value, (float, int)):
                  raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                      str(float_value), str(type(float_value))))
              return str(float_value)

          import argparse
          _parser = argparse.ArgumentParser(prog='Add', description='Calculates sum of two arguments')
          _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
          _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
          _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
          _parsed_args = vars(_parser.parse_args())
          _output_files = _parsed_args.pop("_output_paths", [])

          _outputs = add(**_parsed_args)

          _outputs = [_outputs]

          _output_serializers = [
              _serialize_float,

          ]

          import os
          for idx, output_file in enumerate(_output_files):
              try:
                  os.makedirs(os.path.dirname(output_file))
              except OSError:
                  pass
              with open(output_file, 'w') as f:
                  f.write(_output_serializers[idx](_outputs[idx]))
        image: python:3.7
        name: ""
        resources: {}
      inputs:
        parameters:
        - name: c
        - name: my-divmod-quotient
      metadata:
        annotations:
          pipelines.kubeflow.org/arguments.parameters: '{"a": "{{inputs.parameters.my-divmod-quotient}}",
            "b": "{{inputs.parameters.c}}"}'
          pipelines.kubeflow.org/component_ref: '{}'
          pipelines.kubeflow.org/component_spec: '{"description": "Calculates sum
            of two arguments", "implementation": {"container": {"args": ["--a", {"inputValue":
            "a"}, "--b", {"inputValue": "b"}, "----output-paths", {"outputPath": "Output"}],
            "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\"
            > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def add(a,
            b):\n   ''''''Calculates sum of two arguments''''''\n   return a + b\n\ndef
            _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
            str):\n        return float_value\n    if not isinstance(float_value,
            (float, int)):\n        raise TypeError(''Value \"{}\" has type \"{}\"
            instead of float.''.format(\n            str(float_value), str(type(float_value))))\n    return
            str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
            description=''Calculates sum of two arguments'')\n_parser.add_argument(\"--a\",
            dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
            dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
            dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
            = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
            = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
            os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
            OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
            "image": "python:3.7"}}, "inputs": [{"name": "a", "type": "Float"}, {"name":
            "b", "type": "Float"}], "name": "Add", "outputs": [{"name": "Output",
            "type": "Float"}]}'
          sidecar.istio.io/inject: "false"
        labels:
          pipelines.kubeflow.org/cache_enabled: "true"
          pipelines.kubeflow.org/enable_caching: "true"
          pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
          pipelines.kubeflow.org/pipeline-sdk-type: kfp
      name: add-2
      outputs:
        artifacts:
        - name: add-2-Output
          path: /tmp/outputs/Output/data
    - dag:
        tasks:
        - arguments:
            parameters:
            - name: a
              value: '{{inputs.parameters.a}}'
          name: add
          template: add
        - arguments:
            parameters:
            - name: c
              value: '{{inputs.parameters.c}}'
            - name: my-divmod-quotient
              value: '{{tasks.my-divmod.outputs.parameters.my-divmod-quotient}}'
          dependencies:
          - my-divmod
          name: add-2
          template: add-2
        - arguments:
            parameters:
            - name: add-Output
              value: '{{tasks.add.outputs.parameters.add-Output}}'
            - name: b
              value: '{{inputs.parameters.b}}'
          dependencies:
          - add
          name: my-divmod
          template: my-divmod
      inputs:
        parameters:
        - name: a
        - name: b
        - name: c
      metadata:
        annotations:
          sidecar.istio.io/inject: "false"
        labels:
          pipelines.kubeflow.org/cache_enabled: "true"
      name: calculation-pipeline
      outputs: {}
    - container:
        args:
        - --dividend
        - '{{inputs.parameters.add-Output}}'
        - --divisor
        - '{{inputs.parameters.b}}'
        - '----output-paths'
        - /tmp/outputs/quotient/data
        - /tmp/outputs/remainder/data
        - /tmp/outputs/mlpipeline_ui_metadata/data
        - /tmp/outputs/mlpipeline_metrics/data
        command:
        - sh
        - -ec
        - |
          program_path=$(mktemp)
          printf "%s" "$0" > "$program_path"
          python3 -u "$program_path" "$@"
        - |
          def my_divmod(dividend, divisor):
              '''Divides two numbers and calculate  the quotient and remainder'''

              #Imports inside a component function:
              import numpy as np

              #This function demonstrates how to use nested functions inside a component function:
              def divmod_helper(dividend, divisor):
                  return np.divmod(dividend, divisor)

              (quotient, remainder) = divmod_helper(dividend, divisor)

              from tensorflow.python.lib.io import file_io
              import json

              # Exports a sample tensorboard:
              metadata = {
                'outputs' : [{
                  'type': 'tensorboard',
                  'source': 'gs://ml-pipeline-dataset/tensorboard-train',
                }]
              }

              # Exports two sample metrics:
              metrics = {
                'metrics': [{
                    'name': 'quotient',
                    'numberValue':  float(quotient),
                  },{
                    'name': 'remainder',
                    'numberValue':  float(remainder),
                  }]}

              from collections import namedtuple
              divmod_output = namedtuple('MyDivmodOutput', ['quotient', 'remainder', 'mlpipeline_ui_metadata', 'mlpipeline_metrics'])
              return divmod_output(quotient, remainder, json.dumps(metadata), json.dumps(metrics))

          def _serialize_float(float_value: float) -> str:
              if isinstance(float_value, str):
                  return float_value
              if not isinstance(float_value, (float, int)):
                  raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                      str(float_value), str(type(float_value))))
              return str(float_value)

          import argparse
          _parser = argparse.ArgumentParser(prog='My divmod', description='Divides two numbers and calculate  the quotient and remainder')
          _parser.add_argument("--dividend", dest="dividend", type=float, required=True, default=argparse.SUPPRESS)
          _parser.add_argument("--divisor", dest="divisor", type=float, required=True, default=argparse.SUPPRESS)
          _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=4)
          _parsed_args = vars(_parser.parse_args())
          _output_files = _parsed_args.pop("_output_paths", [])

          _outputs = my_divmod(**_parsed_args)

          _output_serializers = [
              _serialize_float,
              _serialize_float,
              str,
              str,

          ]

          import os
          for idx, output_file in enumerate(_output_files):
              try:
                  os.makedirs(os.path.dirname(output_file))
              except OSError:
                  pass
              with open(output_file, 'w') as f:
                  f.write(_output_serializers[idx](_outputs[idx]))
        image: tensorflow/tensorflow:1.11.0-py3
        name: ""
        resources: {}
      inputs:
        parameters:
        - name: add-Output
        - name: b
      metadata:
        annotations:
          pipelines.kubeflow.org/arguments.parameters: '{"dividend": "{{inputs.parameters.add-Output}}",
            "divisor": "{{inputs.parameters.b}}"}'
          pipelines.kubeflow.org/component_ref: '{}'
          pipelines.kubeflow.org/component_spec: '{"description": "Divides two numbers
            and calculate  the quotient and remainder", "implementation": {"container":
            {"args": ["--dividend", {"inputValue": "dividend"}, "--divisor", {"inputValue":
            "divisor"}, "----output-paths", {"outputPath": "quotient"}, {"outputPath":
            "remainder"}, {"outputPath": "mlpipeline_ui_metadata"}, {"outputPath":
            "mlpipeline_metrics"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
            \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
            "def my_divmod(dividend, divisor):\n    ''''''Divides two numbers and
            calculate  the quotient and remainder''''''\n\n    #Imports inside a component
            function:\n    import numpy as np\n\n    #This function demonstrates how
            to use nested functions inside a component function:\n    def divmod_helper(dividend,
            divisor):\n        return np.divmod(dividend, divisor)\n\n    (quotient,
            remainder) = divmod_helper(dividend, divisor)\n\n    from tensorflow.python.lib.io
            import file_io\n    import json\n\n    # Exports a sample tensorboard:\n    metadata
            = {\n      ''outputs'' : [{\n        ''type'': ''tensorboard'',\n        ''source'':
            ''gs://ml-pipeline-dataset/tensorboard-train'',\n      }]\n    }\n\n    #
            Exports two sample metrics:\n    metrics = {\n      ''metrics'': [{\n          ''name'':
            ''quotient'',\n          ''numberValue'':  float(quotient),\n        },{\n          ''name'':
            ''remainder'',\n          ''numberValue'':  float(remainder),\n        }]}\n\n    from
            collections import namedtuple\n    divmod_output = namedtuple(''MyDivmodOutput'',
            [''quotient'', ''remainder'', ''mlpipeline_ui_metadata'', ''mlpipeline_metrics''])\n    return
            divmod_output(quotient, remainder, json.dumps(metadata), json.dumps(metrics))\n\ndef
            _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
            str):\n        return float_value\n    if not isinstance(float_value,
            (float, int)):\n        raise TypeError(''Value \"{}\" has type \"{}\"
            instead of float.''.format(\n            str(float_value), str(type(float_value))))\n    return
            str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''My
            divmod'', description=''Divides two numbers and calculate  the quotient
            and remainder'')\n_parser.add_argument(\"--dividend\", dest=\"dividend\",
            type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--divisor\",
            dest=\"divisor\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
            dest=\"_output_paths\", type=str, nargs=4)\n_parsed_args = vars(_parser.parse_args())\n_output_files
            = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = my_divmod(**_parsed_args)\n\n_output_serializers
            = [\n    _serialize_float,\n    _serialize_float,\n    str,\n    str,\n\n]\n\nimport
            os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
            OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
            "image": "tensorflow/tensorflow:1.11.0-py3"}}, "inputs": [{"name": "dividend",
            "type": "Float"}, {"name": "divisor", "type": "Float"}], "name": "My divmod",
            "outputs": [{"name": "quotient", "type": "Float"}, {"name": "remainder",
            "type": "Float"}, {"name": "mlpipeline_ui_metadata", "type": "UI_metadata"},
            {"name": "mlpipeline_metrics", "type": "Metrics"}]}'
          sidecar.istio.io/inject: "false"
        labels:
          pipelines.kubeflow.org/cache_enabled: "true"
          pipelines.kubeflow.org/enable_caching: "true"
          pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
          pipelines.kubeflow.org/pipeline-sdk-type: kfp
      name: my-divmod
      outputs:
        artifacts:
        - name: mlpipeline-ui-metadata
          optional: true
          path: /tmp/outputs/mlpipeline_ui_metadata/data
        - name: mlpipeline-metrics
          optional: true
          path: /tmp/outputs/mlpipeline_metrics/data
        - name: my-divmod-quotient
          path: /tmp/outputs/quotient/data
        - name: my-divmod-remainder
          path: /tmp/outputs/remainder/data
        parameters:
        - name: my-divmod-quotient
          valueFrom:
            path: /tmp/outputs/quotient/data
  status:
    artifactRepositoryRef:
      artifactRepository:
        archiveLogs: true
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          keyFormat: artifacts/{{workflow.name}}/{{workflow.creationTimestamp.Y}}/{{workflow.creationTimestamp.m}}/{{workflow.creationTimestamp.d}}/{{pod.name}}
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
      default: true
    conditions:
    - status: "False"
      type: PodRunning
    finishedAt: null
    nodes:
      calculation-pipeline-4rdpv:
        children:
        - calculation-pipeline-4rdpv-383898135
        displayName: calculation-pipeline-4rdpv
        finishedAt: null
        id: calculation-pipeline-4rdpv
        inputs:
          parameters:
          - name: a
            value: "7"
          - name: b
            value: "8"
          - name: c
            value: "17"
        name: calculation-pipeline-4rdpv
        phase: Running
        progress: 1/2
        startedAt: "2022-12-20T09:08:59Z"
        templateName: calculation-pipeline
        templateScope: local/calculation-pipeline-4rdpv
        type: DAG
      calculation-pipeline-4rdpv-359819192:
        boundaryID: calculation-pipeline-4rdpv
        displayName: my-divmod
        finishedAt: null
        id: calculation-pipeline-4rdpv-359819192
        inputs:
          parameters:
          - name: add-Output
            value: "11.0"
          - name: b
            value: "8"
        name: calculation-pipeline-4rdpv.my-divmod
        phase: Pending
        progress: 0/1
        startedAt: "2022-12-20T09:09:13Z"
        templateName: my-divmod
        templateScope: local/calculation-pipeline-4rdpv
        type: Pod
      calculation-pipeline-4rdpv-383898135:
        boundaryID: calculation-pipeline-4rdpv
        children:
        - calculation-pipeline-4rdpv-359819192
        displayName: add
        finishedAt: "2022-12-20T09:09:05Z"
        hostNodeName: mlops-k8s-worker02
        id: calculation-pipeline-4rdpv-383898135
        inputs:
          parameters:
          - name: a
            value: "7"
        name: calculation-pipeline-4rdpv.add
        outputs:
          artifacts:
          - name: add-Output
            path: /tmp/outputs/Output/data
            s3:
              key: artifacts/calculation-pipeline-tphvt/2022/12/08/calculation-pipeline-tphvt-732037261/add-Output.tgz
          - name: main-logs
            s3:
              key: artifacts/calculation-pipeline-tphvt/2022/12/08/calculation-pipeline-tphvt-732037261/main.log
          exitCode: "0"
          parameters:
          - name: add-Output
            value: "11.0"
            valueFrom:
              path: /tmp/outputs/Output/data
        phase: Succeeded
        progress: 1/1
        resourcesDuration:
          cpu: 0
          memory: 0
        startedAt: "2022-12-20T09:08:59Z"
        templateName: add
        templateScope: local/calculation-pipeline-4rdpv
        type: Pod
    phase: Running
    progress: 1/2
    resourcesDuration:
      cpu: 0
      memory: 0
    startedAt: "2022-12-20T09:08:59Z"
kind: List
metadata:
resourceVersion: ""